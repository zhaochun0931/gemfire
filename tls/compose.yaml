services:

  certgen:
    image: openjdk:17-jdk-slim
    container_name: certgen
    working_dir: /certs
    networks:
      - gf-network
    volumes:
      - ./certs:/certs   # host directory for output
    environment:
      PASS: changeit
    command: |
      sh -c "
        # Generate the self-signed key pair and keystore
        keytool -genkeypair -alias mykey -dname 'CN=myapp.example.com, OU=IT, O=MyCompany, L=NY, ST=NY, C=US' -keyalg RSA -keystore keystore.p12 -storepass ${PASS} -storetype PKCS12 -validity 365 && \
        
        # Export the public certificate from the keystore
        keytool -exportcert -alias mykey -file mycert.crt -keystore keystore.p12 -storepass ${PASS} -rfc && \
        
        # Create a truststore and import the public certificate
        keytool -importcert -alias mytrustedcert -file mycert.crt -keystore truststore.p12 -storepass ${PASS} -storetype PKCS12 -noprompt && \
        
        echo 'âœ… Keystore, cert, and truststore created in /certs' && \
        sleep infinity
      "
    healthcheck:
      test: ["CMD", "sh", "-c", "test -f /certs/keystore.p12 && test -f /certs/truststore.p12"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  openldap:
    image: bitnami/openldap:latest
    container_name: openldap
    hostname: openldap
    restart: unless-stopped
    networks:
      - gf-network
    environment:
      LDAP_ADMIN_USERNAME: admin
      LDAP_ADMIN_PASSWORD: password
      LDAP_USERS: user01,user02
      LDAP_PASSWORDS: password,password
      LDAP_ROOT: dc=example,dc=com
      LDAP_ADMIN_DN: cn=admin,dc=example,dc=com
    ports:
      - "1389:1389"

  gemfire-management-console:
    image: registry.packages.broadcom.com/gemfire-management-console/gemfire-management-console:1.3.0
    container_name: gemfire-management-console
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - gf-network

  gf-locator1:
    image: gemfire/gemfire:9.15.6
    container_name: gf-locator1
    environment:
      - ACCEPT_TERMS=y
    networks:
      - gf-network
    volumes:
      - ./gf-locator1:/data
    ports:
      - "10334:10334"
      - "7070:7070"
    command: gfsh start locator --name=gf-locator1
    depends_on:
      - certgen
    restart: unless-stopped

  gf-locator2:
    image: gemfire/gemfire:9.15.6
    container_name: gf-locator2
    environment:
      - ACCEPT_TERMS=y
    networks:
      - gf-network
    volumes:
      - ./gf-locator2:/data
    ports:
      - "10335:10334"
      - "7071:7070"
    command: gfsh start locator --name=gf-locator2 --locators=gf-locator1[10334]
    depends_on:
      - gf-locator1
    restart: unless-stopped

  gf-server1:
    image: gemfire/gemfire:9.15.6
    container_name: gf-server1
    environment:
      - ACCEPT_TERMS=y
    networks:
      - gf-network
    volumes:
      - ./gf-server1:/data
    ports:
      - "40404:40404"
    command: gfsh start server --name=gf-server1 --locators=gf-locator1[10334]
    depends_on:
      - gf-locator1
    restart: unless-stopped

  gf-server2:
    image: gemfire/gemfire:9.15.6
    container_name: gf-server2
    environment:
      - ACCEPT_TERMS=y
    networks:
      - gf-network
    volumes:
      - ./gf-server2:/data
    ports:
      - "40405:40404"
    command: gfsh start server --name=gf-server2 --locators=gf-locator1[10334]
    depends_on:
      - gf-locator1
    restart: unless-stopped

  gf-server3:
    image: gemfire/gemfire:9.15.6
    container_name: gf-server3
    environment:
      - ACCEPT_TERMS=y
    networks:
      - gf-network
    volumes:
      - ./gf-server3:/data
    ports:
      - "40406:40404"
    command: gfsh start server --name=gf-server3 --locators=gf-locator1[10334]
    depends_on:
      - gf-locator1
    restart: unless-stopped

networks:
  gf-network:
    driver: bridge


